// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
// import type { Database } from './types';

function sanitizeEnv(value: unknown): string | undefined {
  if (typeof value !== 'string') return undefined
  let v = value.trim()
  if (!v) return undefined
  const lowered = v.toLowerCase()
  if (['undefined', 'null', 'false'].includes(lowered)) return undefined
  // strip surrounding quotes
  if ((v.startsWith('"') && v.endsWith('"')) || (v.startsWith("'") && v.endsWith("'"))) {
    v = v.slice(1, -1)
  }
  // remove trailing semicolons and whitespace
  v = v.replace(/;+$/g, '').trim()
  return v
}

function isValidUrl(url: string): boolean {
  try {
    // Throws if invalid
    new URL(url)
    return true
  } catch {
    return false
  }
}

const RAW_SUPABASE_URL = (import.meta as any)?.env?.PUBLIC__SUPABASE_URL
const RAW_SUPABASE_PUBLISHABLE_KEY = (import.meta as any)?.env?.PUBLIC__SUPABASE_ANON_KEY

const ENV_SUPABASE_URL = sanitizeEnv(RAW_SUPABASE_URL)
const ENV_SUPABASE_PUBLISHABLE_KEY = sanitizeEnv(RAW_SUPABASE_PUBLISHABLE_KEY)

const SUPABASE_URL = ENV_SUPABASE_URL && isValidUrl(ENV_SUPABASE_URL) ? ENV_SUPABASE_URL : undefined
const SUPABASE_PUBLISHABLE_KEY = ENV_SUPABASE_PUBLISHABLE_KEY

function createSupabaseStub() {
  const stubError = new Error(
    'Supabase is not configured. Please set PUBLIC__SUPABASE_URL and PUBLIC__SUPABASE_ANON_KEY.'
  )

  class FakeBuilder {
    then(onFulfilled?: any, onRejected?: any) {
      return Promise.resolve({ data: null, error: stubError }).then(onFulfilled, onRejected)
    }
    catch(onRejected?: any) {
      return Promise.resolve({ data: null, error: stubError }).catch(onRejected)
    }
    finally(onFinally?: any) {
      return Promise.resolve({ data: null, error: stubError }).finally(onFinally)
    }

    // no-op filter/transform methods for chaining
    eq() { return this }
    limit() { return this }
    order() { return this }

    // query methods return awaitable builder or terminal promise
    select() { return this }
    insert() { return this }
    update() { return this }
    delete() { return this }

    maybeSingle() { return Promise.resolve({ data: null, error: stubError }) }
    single() { return Promise.resolve({ data: null, error: stubError }) }
  }

  const stub = {
    from(_table: string) {
      return new FakeBuilder()
    },
    rpc(_fn: string, _args?: any) {
      return Promise.resolve({ data: null, error: stubError })
    },
    auth: {
      async getSession() {
        return { data: { session: null }, error: stubError }
      },
      onAuthStateChange(_cb: any) {
        return { data: { subscription: { unsubscribe() { /* no-op */ } } }, error: stubError }
      },
      async signInWithPassword() {
        return { data: null, error: stubError }
      },
      async signUp() {
        return { data: null, error: stubError }
      },
      async signOut() {
        return { error: stubError }
      },
      async resetPasswordForEmail() {
        return { data: null, error: stubError }
      },
      async signInWithOAuth() {
        return { data: null, error: stubError }
      },
      admin: {
        async listUsers() {
          return { data: null, error: stubError }
        },
      },
    },
  } as any

  console.error(
    'Supabase environment variables are missing. Set PUBLIC__SUPABASE_URL and PUBLIC__SUPABASE_ANON_KEY to enable backend features.'
  )

  return stub
}

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.warn(
    'Supabase environment variables are missing. Please set PUBLIC__SUPABASE_URL and PUBLIC__SUPABASE_ANON_KEY in your environment.'
  )
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

function createSupabaseOrStub() {
  if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY || !isValidUrl(SUPABASE_URL)) {
    if (SUPABASE_URL && !isValidUrl(SUPABASE_URL)) {
      console.error('Invalid PUBLIC__SUPABASE_URL value; falling back to stub:', SUPABASE_URL)
    }
    return createSupabaseStub()
  }
  try {
    return createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    })
  } catch (error) {
    console.error('Failed to initialize Supabase client; falling back to stub.', error)
    return createSupabaseStub()
  }
}

export const supabase = createSupabaseOrStub();
